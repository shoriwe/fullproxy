program: composite_statement EOF
separator: ; | \n
composite_statement: (statement | expression)? separator

statement:
    assign
    | loops
    | control_flow
    | definitions
    | error_handling
    | initialization_shutdown
    | go
    | return
    | yield
    | super invocation
    | await
    | continue
    | break
    | redo
    | 'pass'

expression:
    literal
    | container
    | other_expression
    | parentheses_expression
    | unary_expression
    | binary_expression

/*
    Statements part
*/
assign: left_hand_side assign_operator right_hand_side

assign_operator:
    '*='
    | '**='
    | '/='
    | '//='
    | '%='
    | '^='
    | '&='
    | '|='
    | '<<='
    | '>>='

left_hand_side: expression (',' expression)*
right_hand_side: expression (',' expression)*

loops: while | until | for

while: 'while' expression '\n' composite_statement '\n' 'end'
until: 'until' expression '\n' composite_statement '\n' 'end'
for: 'for' (expression (',' expression)*) 'in' expression '\n' composite_statement '\n' 'end'


control_flow: if | unless | switch

elif: 'elif' expression '\n' composite_statement '\n'
else: 'else' '\n' composite_statement '\n'
case: 'case' expression (',' expression)* ':' '\n' composite_statement '\n'

if: 'if' expression '\n' composite_statement '\n' elif* else? 'end'
unless: 'unless' expression '\n' composite_statement '\n' elif* else? 'end'
switch: 'switch' expression '\n' case+ else? 'end'

definitions: module | def | async_def | struct | interface | class | enum

module: 'module' identifier '\n' composite_statement '\n' 'end'
def: 'def' identifier '(' (identifier (',' identifier)*)? ')' '\n' composite_statement '\n' 'end'
async_def: 'async' def
struct: 'struct' '\n' (identifier '\n')+ 'end'
interface: 'interface' ('(' (identifier (',' identifier)*)? ')')? '\n' ((def |  async_def) '\n')+ 'end'
class: 'class' ('(' (identifier (',' identifier)*)? ')')? '\n' (composite_statement '\n')* 'end'
enum: 'enum' identifier '\n' ((identifier | assign) '\n')+ 'end'

except: 'except' (identifier | ('(' identifier (',' identifier)+ ')'))? ('=' identifier)? '\n' composite_statement '\n'
finally: 'finally' '\n' composite_statement '\n'
error_handling: 'try' composite_statement '\n' except+ else? finally? 'end'

initialization_shutdown: begin | end

begin: 'BEGIN' '\n' composite_statement '\n' 'end'
end: 'END' '\n' composite_statement '\n' 'end'

go: 'go' method_invocation
return: 'return' (expression (',' expression))?
yield: 'yield' (expression (',' expression))?
super_invocation: 'super' '(' (expression (',' expression)*)? ')'
await: 'await' expression
continue: 'continue' identifier?
break: 'break' identifier?
redo: 'redo' identifier?

/*
    Expressions part
*/

literal:
    string
    | byte_string
    | command_output
    | integer
    | hexadecimal_integer
    | binary_integer
    | octal_integer
    | float
    | scientific_float
    | 'True'
    | 'False'
    | 'None'

string: single_quote_string | double_quote_string
single_quote_string: '\'' any_char* '\''
double_quote_string: '"' any_char* '"'

byte_string: 'b' (single_quote_string | double_quote_string)

command_output: '`' any_char* '`'

integer: [1-9]+[_0-9]*
hexadecimal_integer: '0' [xX] [0-9a-fA-F]+[_0-9a-fA-F]*
binary_integer: '0' [bB] [01]+[_01]*
octal_integer: '0' [oO] [0-7]+[_0-7]*
float: [0-9]+[_0-9]*'.'[0-9]+[_0-9]
scientific_float:
    ([0-9]+[_0-9]*'e-'[0-9]+[_0-9])
    | ([0-9]+[_0-9]*'.'[0-9]+[_0-9]'e-'[0-9]+[_0-9])


container: array | tuple | hash

array: '[' (expression (',' expression)*)? ']'
tuple: '(' ((expression ',') | (expression (',' expression)+))')'
key_value: expression ':' expression
hash: '{' (key_value (',' key_value)*)? '}'


other_expressions:
    lambda
    | generator
    | selector
    | method_invocation
    | index

lambda: 'lambda' (identifier (',' identifier)*)? ':' expression
generator: '(' expression 'for' (identifier (',' identifier)*) 'in' expression ')'
selector: expression '.' identifier
method_invocation: expression '(' (expression (',' expression)*)? ')'
index: expression '[' (
                expression
                | (expression ':' expression?)
                | (expression? ':' expression)) ']'



parentheses_expression: '(' expression ')'


unary_expression: unary_operator expression
unary_operator: '+' | '-' | '!' | '~' | 'not'


binary_expression: (binary_expression binary_operator binary_expression) | expression

binary_operator:
    '**'
    | '*' | '/' | '//' | '%'
    | '+' | '-'
    | '<<' | '>>'
    | '&'
    | '^'
    | '|'
    | '==' | '!=' | '>' | '<' | '<=' | '>='
    | 'isinstaceof' | in
    | 'not'
    | 'and' | 'or'