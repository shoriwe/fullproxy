name: Release

on:
  push:
    branches: ["master"]

jobs:
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.20"
      - name: Set up docker environment
        run: docker compose up -d && sleep 2m
      - name: Test
        run: go test -p 1 -count 1 -coverpkg ./... -coverprofile coverage.txt -covermode count ./...
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.txt
          fail_ci_if_error: true
      - name: Clean docker environment
        run: docker compose --rmi all -v --remove-orphans

  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.latest_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - id: latest_version
        name: Latest version
        run: python version.py >> $GITHUB_OUTPUT

  create-release:
    runs-on: ubuntu-latest
    needs:
      - versioning
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.versioning.outputs.version }}
          release_name: Release ${{ needs.versioning.outputs.version }}
          draft: false
          prerelease: false

  build-release:
    runs-on: ubuntu-latest
    needs:
      - create-release
    strategy:
      matrix:
        os: [linux, windows]
        arch: [amd64, "386"]
    steps:
      - uses: actions/checkout@v3
      - name: Prepare bin directory
        run: mkdir -p bin
      - name: Generate asset name
        id: gen-asset-name
        run: echo filename=${{ github.event.repository.name }}.${{ matrix.os }}.${{ matrix.arch }}$(python -c "import os; print('.exe' if os.getenv('GOOS') == 'windows' else '', end='')") >> $GITHUB_OUTPUT
      - name: Build binary
        run: go build -v -o bin/${{ steps.gen-asset-name.outputs.filename }}
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
      - name: UPX
        run: upx bin/*
      - name: Upload Binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./bin/${{ steps.gen-asset-name.outputs.filename }}
          asset_name: ${{ steps.gen-asset-name.outputs.filename }}
          asset_content_type: application/octet-stream
